{"version":3,"sources":["components/Note/OpenNote.js","components/Note/CloseNote.js","components/Note/index.js","components/ToDoNoteList.js","initialData.js","components/ToDoList.js","App.js","index.js"],"names":["OpenNote","_ref","note","changeState","lists","editNote","transferNote","react_default","a","createElement","id","className","type","defaultValue","discription","onKeyDown","event","keyCode","document","getElementById","value","style","width","onClick","height","disabled","map","list","console","log","listId","key","name","listsElement","CloseNote","deleteNote","Note","state","isOpen","_this","setState","_this$props","this","props","Note_OpenNote","Note_CloseNote","Component","ToDoNoteList","notes","addNote","deleteList","components_Note","_","require","uniqueId","ToDoList","ListId","newLists","filter","noteId","newNotes","newListId","slice","forEach","getFilterNote","addList","concat","elementsToDoNoteList","components_ToDoNoteList","_this2","App","components_ToDoList","render","src_App"],"mappings":"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","file":"static/js/main.3f5ee7a1.chunk.js","sourcesContent":["import React from \"react\";\nconst listsElement = (lists, note) =>  lists.map(list => {\n    console.log(list.id);\n        if (list.id === note.listId){\n            return (\n                <option \n                    key = {list.id} \n                    id = {list.id + \"option\"} \n                    value ={ list.id}\n                    // selected = {list.name}\n                    >\n                    {list.name}\n                </option>\n            )\n        }\n        else {\n            return (\n                <option \n                    key = {list.id} \n                    id = {list.id + \"option\"} \n                    value ={ list.id}\n                    // selected = {list.id.toString()}\n                    >\n                    {list.name}\n                </option>\n            )\n        }\n        \n    }\n) \n\nconst OpenNote = ({note, changeState, lists, editNote, transferNote}) => {\n    return(\n       <div>\n            <input\n                id = {note.id} \n                className=\" col-sm-10\" \n                type=\"text\" \n                defaultValue={note.discription} \n                onKeyDown={(event) =>{\n                if (event.keyCode === 27){\n                    changeState()\n                }\n                else if(event.keyCode === 13){\n                    editNote(note.id, document.getElementById(note.id).value);\n                    changeState();\n                }\n                }}\n                style={{width: \"130px\"}}\n            >\n            </input>\n            <button \n                className=\" btn-sm bg-success\"\n                onClick = {() => {\n                    editNote(note.id, document.getElementById(note.id).value);\n                    changeState();\n                }}        \n            >\n                <big className=\"card-header-pills\" >&#10003;</big>\n            </button>\n            <button \n                className=\"hand remove remove-list\" style={{width:\"20px\", height: \"20px\"} }\n                onClick = {changeState}\n            >\n                {/* <big className=\"card-header-pills\" >X</big> */}\n            </button>\n            <div>\n                <select className=\"select-list\" id = {note.id + \"select\"}> \n                    <option disabled>---select list---</option>\n                    {listsElement(lists,note)}\n                </select>\n                <button onClick={()=>{\n                    // console.log(document.getElementById(note.id + \"select\").value)\n                    transferNote(note.id, document.getElementById(note.id + \"select\").value)\n                    }}>\n                    Done\n                </button>\n            </div>\n        </div>  \n    )\n}\n\nexport default OpenNote;","import React from \"react\";\n\n\nconst CloseNote = ({note, changeState, deleteNote}) => {\n    return(\n        <div>\n            <div type =\"text\">\n                {note.discription}\n            </div>\n            <div>\n                <button \n                    className=\"bg-primary btn-sm\"\n                    onClick = {() =>{\n                        changeState();\n                    }}\n                >\n                    <div>Edit</div>\n                </button>\n                <button \n                    className=\" bg-danger btn-sm\"\n                    onClick = {() =>deleteNote(note.id)}\n                >\n                    Delete\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default CloseNote;","import React,{Component} from \"react\";\nimport OpenNote from \"./OpenNote\";\nimport CloseNote from \"./CloseNote\";\n\nclass Note extends Component{\n    state = {\n        isOpen: false\n    }\n\n    render(){\n        const {note, lists, editNote, deleteNote, transferNote} = this.props;\n        return(\n            <div>\n                {this.state.isOpen ?\n                    <OpenNote \n                        note = {note} \n                        changeState = {this.changeState} \n                        lists= {lists} \n                        editNote={editNote} \n                        transferNote ={transferNote}/> : \n                    <CloseNote note = {note} changeState = {this.changeState} deleteNote={deleteNote}/>\n                }\n            </div>\n        )\n    }\n\n    changeState = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        })\n    }\n}\n\nexport default Note;","import React, {Component} from \"react\";\nimport Note from \"./Note\"\n\n\nclass ToDoNoteList extends Component {\n\n    \n    \n\n    render(){\n        \n        const {list, notes, addNote, lists, editNote, deleteNote, deleteList, transferNote} = this.props;\n        const elemenstNote = () => {\n            return(\n                notes.map(note => {\n                    return (\n                        <section key = {note.id} className=\"card\"> \n                            <Note \n                                note={note} \n                                lists={lists} \n                                editNote={editNote} \n                                deleteNote={deleteNote}\n                                transferNote= {transferNote}/> \n                        </section>\n                    )\n                })\n            )\n        }\n        return(\n            \n                <section >\n                    <h1>\n                        {list.name}\n                    </h1>\n                    {/* <a className=\"hand\" href=\"public/index.html\">\n                        <div className=\"remove remove-list\"></div>\n                    </a> */}\n                    <button \n                        className=\"hand remove remove-list\" style={{width:\"20px\", height: \"20px\"} }\n                        onClick={()=>{deleteList(list.id)}}\n                        >\n                    </button>\n                    <section>\n                        {elemenstNote()}\n                    </section>\n                    <input \n                        \n                        id = {list.id}\n                        onKeyDown = {(event) =>{\n                            if (event.keyCode === 13){\n                                addNote(list.id, document.getElementById(list.id).value);\n                                document.getElementById(list.id).value = \"\";\n                            }\n                        }}\n                    ></input>\n                </section>\n            \n        )\n    }\n\n    \n}\n\nexport default ToDoNoteList;","\nvar _ = require(\"lodash\");\n\nexport const lists = [\n    {\n        id: +_.uniqueId(),\n        name: \"ToDo\"\n    },\n    {\n        id: +_.uniqueId(),\n        name: \"Doing\"\n    },\n    {\n        id: +_.uniqueId(),\n        name: \"Done\"\n    }\n]\n\n export const notes = [\n    {\n        id: 1,\n        discription: \"Fix bug whith player\",\n        listId: lists[0].id\n    },\n    {\n        id: 2,\n        discription: \"Add feature with D3\",\n        listId: lists[0].id\n    },\n    {\n        id: 3,\n        discription: \"Learn EmberJS\",\n        listId: lists[1].id\n    }\n]","import React, {Component} from \"react\";\nimport ToDoNoteList from \"./ToDoNoteList\"\nimport {lists, notes} from \"../initialData\"\n\nclass ToDoList extends Component{\n\n    state = {\n        lists: lists,\n        notes: notes\n    }\n\n    deleteList = (ListId) =>{\n        const newLists = this.state.lists.filter(list => list.id !== ListId)\n\n        this.setState({\n            lists: newLists\n        })\n    }\n\n    deleteNote = (noteId) =>{\n        const newNotes = this.state.notes.filter(note => note.id !== noteId)\n\n        this.setState({\n            notes: newNotes\n        })\n    }\n\n    editNote = (id, discription) =>{\n        const newNotes = this.state.notes.map(note =>{\n            if (note.id === id){\n                note.discription = discription;\n            }\n            return note\n        })\n        this.setState({\n            notes: newNotes\n        })\n    }\n\n    transferNote = (noteId, newListId) =>{\n        const newNotes = this.state.notes.slice();\n        newNotes.forEach(note =>{\n            if (note.id === noteId){\n                note.listId = +newListId\n                console.log(note)\n            }\n        })\n\n        this.setState({\n            notes: newNotes\n        })\n\n\n    }\n        \n    \n\n\n    getFilterNote = (ListId) => this.state.notes.filter(note => note.listId === ListId)\n\n    addList = (name) => {\n        var _= require('lodash');\n        var newLists = this.state.lists.concat([{\n            id: +_.uniqueId(),\n            name: name\n        }])\n        this.setState({\n            lists: newLists\n        })\n    }\n\n    addNote = (ListId, discription) => {\n        var _= require('lodash');\n        var newNotes = this.state.notes.concat([{\n            id: +_.uniqueId(),\n            discription: discription,\n            listId: ListId\n        }])\n        this.setState({\n            notes: newNotes\n        })\n    }\n\n    elementsToDoNoteList = () =>{\n        return(\n            this.state.lists.map(list => {\n                return(\n                    \n                        <section \n                            className=\"list list-inline\"\n                            key = {list.id}\n                        >\n                            <ToDoNoteList \n                                list = {list} \n                                notes = {this.getFilterNote(list.id)}\n                                addNote = {this.addNote}\n                                lists = {this.state.lists}\n                                editNote = {this.editNote}\n                                deleteNote = {this.deleteNote}\n                                deleteList = {this.deleteList}\n                                transferNote = {this.transferNote}\n                            />\n                        </section>\n                   \n                )\n            })\n        )\n    }\n\n\n\n\n\n    render(){\n        return(\n            <div>\n                {this.elementsToDoNoteList()}\n                <section className=\"list new-list list-inline\"> \n                    \n                        <input \n                            type=\"text\"  \n                            id = \"addList\"\n                            onKeyDown = {(event) => {\n                                if (event.keyCode === 13){\n                                    this.addList(document.getElementById(\"addList\").value);\n                                    document.getElementById(\"addList\").value = \"\";\n                                }        \n                            }}\n                        >\n                        </input>\n                   \n                </section>\n            </div>\n        )\n    }\n}\nexport default ToDoList;","import React,{Component} from \"react\";\nimport ToDoList from \"./components/ToDoList\";\nimport \"./style/trello.css\"\n\n\nclass App extends Component{\n\n    render(){\n        return(\n            <div>\n                <header>\n                    <div className=\"row\">\n                        <h1 className=\"app-name left\">ToDo</h1>\n                    </div>\n                </header>\n                <section className=\"lists-container\">\n                    <div className=\"row\">\n                        <ToDoList/>\n                    </div>\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from \"react\";\nimport {render} from \"react-dom\";\nimport App from \"./App\"\n\nrender(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}